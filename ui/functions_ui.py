# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'functions.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(654, 494)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidgetFunctions = QtWidgets.QTabWidget(self)
        self.tabWidgetFunctions.setObjectName("tabWidgetFunctions")
        self.tab_welcome = QtWidgets.QWidget()
        self.tab_welcome.setObjectName("tab_welcome")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_welcome)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.TextEditWelcome = QtWidgets.QPlainTextEdit(self.tab_welcome)
        self.TextEditWelcome.setObjectName("TextEditWelcome")
        self.gridLayout_2.addWidget(self.TextEditWelcome, 2, 0, 1, 1)
        self.WelcomeImg = QtWidgets.QLabel(self.tab_welcome)
        self.WelcomeImg.setText("")
        self.WelcomeImg.setPixmap(QtGui.QPixmap(":/functions/welcome.png"))
        self.WelcomeImg.setObjectName("WelcomeImg")
        self.gridLayout_2.addWidget(self.WelcomeImg, 3, 0, 1, 1)
        self.tabWidgetFunctions.addTab(self.tab_welcome, "")
        self.tab_def = QtWidgets.QWidget()
        self.tab_def.setObjectName("tab_def")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_def)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.DefImg = QtWidgets.QLabel(self.tab_def)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DefImg.sizePolicy().hasHeightForWidth())
        self.DefImg.setSizePolicy(sizePolicy)
        self.DefImg.setMinimumSize(QtCore.QSize(0, 0))
        self.DefImg.setMaximumSize(QtCore.QSize(600, 150))
        self.DefImg.setText("")
        self.DefImg.setPixmap(QtGui.QPixmap(":/functions/def.PNG"))
        self.DefImg.setObjectName("DefImg")
        self.gridLayout_3.addWidget(self.DefImg, 1, 0, 1, 1)
        self.TextEditDef = QtWidgets.QPlainTextEdit(self.tab_def)
        self.TextEditDef.setMinimumSize(QtCore.QSize(0, 188))
        self.TextEditDef.setObjectName("TextEditDef")
        self.gridLayout_3.addWidget(self.TextEditDef, 0, 0, 1, 1)
        self.tabWidgetFunctions.addTab(self.tab_def, "")
        self.tab_return = QtWidgets.QWidget()
        self.tab_return.setObjectName("tab_return")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_return)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.TextEditReturn = QtWidgets.QPlainTextEdit(self.tab_return)
        self.TextEditReturn.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditReturn.setObjectName("TextEditReturn")
        self.gridLayout_4.addWidget(self.TextEditReturn, 0, 0, 1, 1)
        self.ReturnImg = QtWidgets.QLabel(self.tab_return)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReturnImg.sizePolicy().hasHeightForWidth())
        self.ReturnImg.setSizePolicy(sizePolicy)
        self.ReturnImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ReturnImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ReturnImg.setText("")
        self.ReturnImg.setPixmap(QtGui.QPixmap(":/functions/functions1.gif"))
        self.ReturnImg.setObjectName("ReturnImg")
        self.gridLayout_4.addWidget(self.ReturnImg, 1, 0, 1, 1)
        self.tabWidgetFunctions.addTab(self.tab_return, "")
        self.tab_exercise1 = QtWidgets.QWidget()
        self.tab_exercise1.setObjectName("tab_exercise1")
        self.pushButtonExercise1 = QtWidgets.QPushButton(self.tab_exercise1)
        self.pushButtonExercise1.setGeometry(QtCore.QRect(220, 280, 131, 23))
        self.pushButtonExercise1.setObjectName("pushButtonExercise1")
        self.TextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.TextEditExercise1.setGeometry(QtCore.QRect(80, 20, 401, 121))
        self.TextEditExercise1.setObjectName("TextEditExercise1")
        self.labelExercise1 = QtWidgets.QLabel(self.tab_exercise1)
        self.labelExercise1.setGeometry(QtCore.QRect(100, 350, 391, 41))
        self.labelExercise1.setText("")
        self.labelExercise1.setObjectName("labelExercise1")
        self.plainTextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.plainTextEditExercise1.setGeometry(QtCore.QRect(120, 170, 321, 61))
        self.plainTextEditExercise1.setObjectName("plainTextEditExercise1")
        self.tabWidgetFunctions.addTab(self.tab_exercise1, "")
        self.tab_examples = QtWidgets.QWidget()
        self.tab_examples.setObjectName("tab_examples")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_examples)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.TextEditExamples = QtWidgets.QPlainTextEdit(self.tab_examples)
        self.TextEditExamples.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditExamples.setObjectName("TextEditExamples")
        self.gridLayout_6.addWidget(self.TextEditExamples, 0, 0, 1, 1)
        self.ExamplesImg = QtWidgets.QLabel(self.tab_examples)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExamplesImg.sizePolicy().hasHeightForWidth())
        self.ExamplesImg.setSizePolicy(sizePolicy)
        self.ExamplesImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ExamplesImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ExamplesImg.setText("")
        self.ExamplesImg.setPixmap(QtGui.QPixmap(":/functions/example.jpg"))
        self.ExamplesImg.setObjectName("ExamplesImg")
        self.gridLayout_6.addWidget(self.ExamplesImg, 1, 0, 1, 1)
        self.tabWidgetFunctions.addTab(self.tab_examples, "")
        self.tab_exercise2 = QtWidgets.QWidget()
        self.tab_exercise2.setObjectName("tab_exercise2")
        self.TextEditExercise2 = QtWidgets.QPlainTextEdit(self.tab_exercise2)
        self.TextEditExercise2.setGeometry(QtCore.QRect(90, 60, 391, 101))
        self.TextEditExercise2.setObjectName("TextEditExercise2")
        self.pushButtonExercise2 = QtWidgets.QPushButton(self.tab_exercise2)
        self.pushButtonExercise2.setGeometry(QtCore.QRect(220, 240, 75, 23))
        self.pushButtonExercise2.setObjectName("pushButtonExercise2")
        self.lineEditExercise2 = QtWidgets.QLineEdit(self.tab_exercise2)
        self.lineEditExercise2.setGeometry(QtCore.QRect(160, 200, 221, 20))
        self.lineEditExercise2.setObjectName("lineEditExercise2")
        self.labelExercise2 = QtWidgets.QLabel(self.tab_exercise2)
        self.labelExercise2.setGeometry(QtCore.QRect(90, 300, 381, 41))
        self.labelExercise2.setText("")
        self.labelExercise2.setObjectName("labelExercise2")
        self.tabWidgetFunctions.addTab(self.tab_exercise2, "")
        self.gridLayout.addWidget(self.tabWidgetFunctions, 0, 0, 1, 1)

        self.retranslateUi()
        self.tabWidgetFunctions.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setCentralWidget(self.tabWidgetFunctions)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Własne funkcje"))
        self.TextEditWelcome.setPlainText(_translate("Form", "We wcześniejszych rozdziałach poznaliśmy, czym są funkcję. Teraz poszerzymy tę wiedzę - nauczymy się sami tworzyć własne funkcje. Dzięki temu lepiej też zrozumiemy te, których używaliśmy do tej pory. W naszej karierze programisty często będziemy zmuszeni tworzyć nowe funkcje. \n"
"\n"
"O funkcji możemy myśleć na kilka sposobów. Jeden z nich to myślenie o niej jak o czarnej skrzynce, do której możemy włożyć kilka informacji na początek. Następnie funkcja przekształca te liczby w jakiś określony sposób, jaki zdefiniujemy i zwraca nam ostateczną wartość. A że teraz my będziemy definiować te funkcje, to od nas będzie zależeć jak będzie je przekształcać.\n"
"\n"
"Funkcja to może też być przepis na jakąś potrawę. Zawsze dodajemy jakieś składniki. Później musimy je odpowiednio przekształcić i w efekcie otrzymujemy pyszne danie - rezultat naszej funkcji.\n"
"\n"
"Funkcje równie dobrze mogą nie zwracać nic w zamian. Mogą też nie przyjmować żadnych argumentów. Dla przykładu funkcją mogłaby być instrukcja jak się przywitać.\n"
"def przywitaj_sie():\n"
"    powiedz_czesc()\n"
"    usciskaj_dlon()\n"
"    usmiechnij_sie()\n"
"\n"
"Każda z powiedz_czesc(), usciskaj_dlon(), usmiechnij_sie() to osobne funkcje, które powinny mieć swoje własne definicje. Np. uściskanie dłoni składa się z wyciągnięcia ręki do przodu, chwycenia ręki drugiej osoby, ściśnięcia dłoni i wycofania ręki. A każdą z tych czynności można rozbić na jeszcze mniejsze czynności i tak dalej i tak dalej."))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_welcome), _translate("Form", "Własne funkcje"))
        self.TextEditDef.setPlainText(_translate("Form", "Tworzenie nowych funkcji ma następujący format:\n"
"\n"
"def nazwa_funkcji(argumenty):\n"
"    linijki kodu\n"
"    ...\n"
"\n"
"Słówko def jest słowem klucz, który rozpoczyna sekwencję. Następnym krokiem jest wybranie nazwy funkcji. Nazwa powinna odzwierciedlać to, czym dana funkcja się zajmuje, ale ostatecznie jest dowolna. Warto trzymać się konwencji (pisanie z małej litery i odzielanie kolejnych słów podkreślnikiem \"_\", ale nie jest to wymagane. \n"
"\n"
"Argumenty to wszystkie dodatkowe informacje, których potrzebuje nasza funkcja, aby prawidłowo funkcjonować. Wyobraźmy sobie, że tworzymy funkcję, która będzie dodawała dwie liczby. Wtedy będziemy potrzebowali dwóch argumentów - pierwszej i drugiej liczby, które mamy dodać. Jeśli mamy stworzyć funkcję, która będzie witała użytkownika, będzie potrzebny jeden argument - imie użytkownika. Pierwsza linijka zawsze kończy się dwukropkiem.\n"
"\n"
"def add_two_numbers(number1, number2):\n"
"    print(number1 + number2)\n"
"\n"
"def welcome_user(name):\n"
"    print(\"Hello, \" + name + \"!\")\n"
"\n"
"Ostatnim krokiem jest zdefiniowanie ciała naszej funkcji, czyli kolejnych kroków jakie będzie musiała wykonać nasza funkcja aby ukończyć swoje zadanie. W podanych powyżej przykładach składa się ona tylko z jednej linijki, ale równie dobrze mogłoby ich być dużo więcej. Ważne jest tutaj wcięcie podobnie jak w instrukcjach warunkowych. Wcięcie definuje co będzie częścią funkcji."))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_def), _translate("Form", "def"))
        self.TextEditReturn.setPlainText(_translate("Form", "Funkcje mogą zwracać jakąś wartość. Weźmy jako przykład funkcję dodawania z poprzedniej karty. Wypisuje ona wynik do konsoli za pomocą print. Ale z wynikiem takiej funkcji nie możemy nic więcej zrobić. Jest on pokazany, a następnie zapomniany. Żeby mieć możliwość wykorzystania tego wyniku w naszym programie, użyjemy słowa return.\n"
"\n"
"def add_two_numbers(number1, number2):\n"
"    return number1 + number2\n"
"\n"
"Tak zdefiniowana funkcja będzie zwracała wartość do naszego programu. Po takiej definicji w dowolnym miejscu możemy wynik takiej funkcji zapisać w zmiennej:\n"
"\n"
"wynik_dodawania = add_two_numbers(4, 4)\n"
"\n"
"Program poszuka sobie definicji funkcji add_two_numbers(number1, number2) i wykona odpowiednie działanie (doda te dwie liczby). Następnie zwróci wynik (ponieważ użyliśmy słówka return) i zapisze go w zmiennej wynik_dodawania. Słówko return kończy wykonywanie funkcji - oznacza, że wiemy już jaki jest wynik i nie musimy już nic więcej robić.\n"
"\n"
"Możemy teraz myśleć o funkcji jak o jakimś pudle, do którego wkładamy jakieś dane. Nasze pudło przekształca te dane w określony sposób (zgodnie z naszą definicją),  a na sam koniec zwraca nam wartość swoich obliczeń."))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_return), _translate("Form", "return"))
        self.pushButtonExercise1.setText(_translate("Form", "Sprawdź"))
        self.TextEditExercise1.setPlainText(_translate("Form", "Pierwsze zadanie!\n"
"Zdefiniuj własną funkcję o nazwie square, która podniesie wybraną liczbę do potęgi 2. \n"
"Nazwa funkcji: square\n"
"Liczba argumentów: 1 ( funkcja przyjmuje jedną liczbę i zwraca jej wartość do kwadratu).\n"
"Przykładowe wywołanie funkcji:\n"
"square(5) - powinno zwrócić liczbę 25"))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_exercise1), _translate("Form", "Zadanie 1"))
        self.TextEditExamples.setPlainText(_translate("Form", "Spróbujmy zrobić sobie jeszcze jeden ciekawy przykład:\n"
"\n"
"def draw_tree(levels):\n"
"    star_counter = 1\n"
"    for i in range(levels):\n"
"        print((\"*\" * star_counter).center(levels*2) )\n"
"        star_counter += 2\n"
"\n"
"Funkcja ta pozwala nam narysować choinkę w konsoli o określonym rozmiarze. Zmienna star_counter zapamiętuje ile gwiazdek ma być narysowanych w danej linijce. W każdej kolejnej linijce będziemy potrzebowali dwóch więcej. \n"
"\"*\" * star_counter - zwraca nam potrzebną ilość gwiazdek\n"
"center(levels*2) - wycentruje nam nasze gwiazdki, żeby ładnie się układały jedne pod drugim i tworzyły drzewko. Argument levels mówi, jak wysokie ma być drzewo. Jego szerokość określamy na dwa razy jego wysokość, gdyż będzie z każdym kolejnym poziomem rysowali po lewej i po prawej"))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_examples), _translate("Form", "Przykład"))
        self.TextEditExercise2.setPlainText(_translate("Form", "Drugie zadanie!\n"
"Wywołaj funkcję z poprzedniej zakładki. Jako argument podaj dowolną liczbę naturalną.\n"
"Jeśli popełnisz błąd, możliwe, że program się posypie. Ale się nie przejmuj, uruchom go sobie znowu.\n"
"Wyniki swoich działań możesz zobaczyć w konsoli."))
        self.pushButtonExercise2.setText(_translate("Form", "Sprawdź"))
        self.tabWidgetFunctions.setTabText(self.tabWidgetFunctions.indexOf(self.tab_exercise2), _translate("Form", "Zadanie 2"))
import obrazki.obrazki_functions
