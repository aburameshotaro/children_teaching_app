# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lists.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(654, 494)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidgetLists = QtWidgets.QTabWidget(self)
        self.tabWidgetLists.setObjectName("tabWidgetLists")
        self.tab_welcome = QtWidgets.QWidget()
        self.tab_welcome.setObjectName("tab_welcome")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_welcome)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.WelcomeImg = QtWidgets.QLabel(self.tab_welcome)
        self.WelcomeImg.setText("")
        self.WelcomeImg.setPixmap(QtGui.QPixmap(":/functions/tablica_1D.png"))
        self.WelcomeImg.setObjectName("WelcomeImg")
        self.gridLayout_2.addWidget(self.WelcomeImg, 3, 0, 1, 1)
        self.TextEditWelcome = QtWidgets.QPlainTextEdit(self.tab_welcome)
        self.TextEditWelcome.setObjectName("TextEditWelcome")
        self.gridLayout_2.addWidget(self.TextEditWelcome, 2, 0, 1, 1)
        self.tabWidgetLists.addTab(self.tab_welcome, "")
        self.tab_slicing = QtWidgets.QWidget()
        self.tab_slicing.setObjectName("tab_slicing")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_slicing)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.SlicingImg = QtWidgets.QLabel(self.tab_slicing)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SlicingImg.sizePolicy().hasHeightForWidth())
        self.SlicingImg.setSizePolicy(sizePolicy)
        self.SlicingImg.setMinimumSize(QtCore.QSize(0, 200))
        self.SlicingImg.setMaximumSize(QtCore.QSize(600, 220))
        self.SlicingImg.setText("")
        self.SlicingImg.setPixmap(QtGui.QPixmap(":/functions/list_slicing.png"))
        self.SlicingImg.setObjectName("SlicingImg")
        self.gridLayout_3.addWidget(self.SlicingImg, 1, 0, 1, 1)
        self.TextEditSlicing = QtWidgets.QPlainTextEdit(self.tab_slicing)
        self.TextEditSlicing.setMinimumSize(QtCore.QSize(0, 188))
        self.TextEditSlicing.setObjectName("TextEditSlicing")
        self.gridLayout_3.addWidget(self.TextEditSlicing, 0, 0, 1, 1)
        self.tabWidgetLists.addTab(self.tab_slicing, "")
        self.tab_sum_len = QtWidgets.QWidget()
        self.tab_sum_len.setObjectName("tab_sum_len")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_sum_len)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.TextEditSumLen = QtWidgets.QPlainTextEdit(self.tab_sum_len)
        self.TextEditSumLen.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditSumLen.setObjectName("TextEditSumLen")
        self.gridLayout_4.addWidget(self.TextEditSumLen, 0, 0, 1, 1)
        self.SumLenImg = QtWidgets.QLabel(self.tab_sum_len)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SumLenImg.sizePolicy().hasHeightForWidth())
        self.SumLenImg.setSizePolicy(sizePolicy)
        self.SumLenImg.setMinimumSize(QtCore.QSize(0, 0))
        self.SumLenImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.SumLenImg.setText("")
        self.SumLenImg.setPixmap(QtGui.QPixmap(":/functions/sum.png"))
        self.SumLenImg.setObjectName("SumLenImg")
        self.gridLayout_4.addWidget(self.SumLenImg, 1, 0, 1, 1)
        self.tabWidgetLists.addTab(self.tab_sum_len, "")
        self.tab_exercise1 = QtWidgets.QWidget()
        self.tab_exercise1.setObjectName("tab_exercise1")
        self.pushButtonExercise1 = QtWidgets.QPushButton(self.tab_exercise1)
        self.pushButtonExercise1.setGeometry(QtCore.QRect(230, 310, 131, 23))
        self.pushButtonExercise1.setObjectName("pushButtonExercise1")
        self.TextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.TextEditExercise1.setGeometry(QtCore.QRect(120, 50, 401, 121))
        self.TextEditExercise1.setObjectName("TextEditExercise1")
        self.labelExercise1 = QtWidgets.QLabel(self.tab_exercise1)
        self.labelExercise1.setGeometry(QtCore.QRect(100, 350, 421, 41))
        self.labelExercise1.setText("")
        self.labelExercise1.setObjectName("labelExercise1")
        self.lineEditExercise1 = QtWidgets.QLineEdit(self.tab_exercise1)
        self.lineEditExercise1.setGeometry(QtCore.QRect(150, 220, 331, 20))
        self.lineEditExercise1.setObjectName("lineEditExercise1")
        self.tabWidgetLists.addTab(self.tab_exercise1, "")
        self.tab_iterations = QtWidgets.QWidget()
        self.tab_iterations.setObjectName("tab_iterations")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_iterations)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.TextEditIterations = QtWidgets.QPlainTextEdit(self.tab_iterations)
        self.TextEditIterations.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditIterations.setObjectName("TextEditIterations")
        self.gridLayout_6.addWidget(self.TextEditIterations, 0, 0, 1, 1)
        self.IterationsImg = QtWidgets.QLabel(self.tab_iterations)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.IterationsImg.sizePolicy().hasHeightForWidth())
        self.IterationsImg.setSizePolicy(sizePolicy)
        self.IterationsImg.setMinimumSize(QtCore.QSize(0, 0))
        self.IterationsImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.IterationsImg.setText("")
        self.IterationsImg.setPixmap(QtGui.QPixmap(":/functions/petla_for.png"))
        self.IterationsImg.setObjectName("IterationsImg")
        self.gridLayout_6.addWidget(self.IterationsImg, 1, 0, 1, 1)
        self.tabWidgetLists.addTab(self.tab_iterations, "")
        self.tab_nested_if = QtWidgets.QWidget()
        self.tab_nested_if.setObjectName("tab_nested_if")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_nested_if)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.TextEditNestedIf = QtWidgets.QPlainTextEdit(self.tab_nested_if)
        self.TextEditNestedIf.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditNestedIf.setObjectName("TextEditNestedIf")
        self.gridLayout_5.addWidget(self.TextEditNestedIf, 0, 0, 1, 2)
        self.NestedIfImg = QtWidgets.QLabel(self.tab_nested_if)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.NestedIfImg.sizePolicy().hasHeightForWidth())
        self.NestedIfImg.setSizePolicy(sizePolicy)
        self.NestedIfImg.setMinimumSize(QtCore.QSize(0, 0))
        self.NestedIfImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.NestedIfImg.setText("")
        self.NestedIfImg.setPixmap(QtGui.QPixmap(":/functions/appendList.PNG"))
        self.NestedIfImg.setObjectName("NestedIfImg")
        self.gridLayout_5.addWidget(self.NestedIfImg, 1, 0, 2, 2)
        self.tabWidgetLists.addTab(self.tab_nested_if, "")
        self.tab_exercise2 = QtWidgets.QWidget()
        self.tab_exercise2.setObjectName("tab_exercise2")
        self.TextEditExercise2 = QtWidgets.QPlainTextEdit(self.tab_exercise2)
        self.TextEditExercise2.setGeometry(QtCore.QRect(100, 40, 391, 141))
        self.TextEditExercise2.setObjectName("TextEditExercise2")
        self.pushButtonExercise2 = QtWidgets.QPushButton(self.tab_exercise2)
        self.pushButtonExercise2.setGeometry(QtCore.QRect(220, 240, 75, 23))
        self.pushButtonExercise2.setObjectName("pushButtonExercise2")
        self.lineEditExercise2 = QtWidgets.QLineEdit(self.tab_exercise2)
        self.lineEditExercise2.setGeometry(QtCore.QRect(160, 200, 251, 20))
        self.lineEditExercise2.setObjectName("lineEditExercise2")
        self.labelExercise2 = QtWidgets.QLabel(self.tab_exercise2)
        self.labelExercise2.setGeometry(QtCore.QRect(90, 300, 381, 41))
        self.labelExercise2.setText("")
        self.labelExercise2.setObjectName("labelExercise2")
        self.tabWidgetLists.addTab(self.tab_exercise2, "")
        self.gridLayout.addWidget(self.tabWidgetLists, 0, 0, 1, 1)

        self.retranslateUi()
        self.tabWidgetLists.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setCentralWidget(self.tabWidgetLists) 

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Różne ścieżki programu"))
        self.TextEditWelcome.setPlainText(_translate("Form", "Lista *nie mylić z listem* to sposób na przechowywanie kilku wartości powiązanych ze sobą w jednej zmiennej. Jeśli pojedyńczą zmienną traktowaliśmy jako skrzynię, to lista byłaby szafą z szufladami, gdzie każda szuflada jest ponumerowana i może zawierać inną wartość. Jako przykład weźmy sobie oceny z matematyki. Jak chcielibyśmy je przechowywać w naszym programie? Jednym ze sposobów byłoby utworzenie kilku zmiennych(ocena1, ocena2, ocena3), w których przechowywalibyśmy różne oceny:\n"
"ocena1 = 3\n"
"ocena2= 4\n"
"ocena3 = 5.5\n"
"Ten sposób nie jest zbytnio wygodny i ma wiele minusów. Co w przypadku gdyby nagle pojawiła się niezapowiedziana kartkówka? Nie byłoby gdzie wpisać oceny bez przygotowanej kolejnej zmiennej. \n"
"Z pomocą przychodzi nam lista. Pozwala nam ona przechowywać kilka informacji w jednym miejscu. Możemy dodawać nowe informacje, edytować stare. Będziemy mogli łatwo przejść przez wszystkie elementy, policzyć sumę wszystkich elementów i poznać ich ilość.\n"
"\n"
"oceny = [3, 4, 5.5]\n"
"\n"
"Stworzenie listy wymaga kwadratowych nawiasów i każde kolejne dane oddzielamy od siebie przecinkiem. Kropka służy do zapisania liczb po przecinku (english style - zdaje sobie sprawę z absurdu tego zdania, chodzi o części dziesiętne itd. xD). \n"
"\n"
"W listach możemy pamiętać nie tylko liczby, ale również tekst.\n"
"\n"
"lista_zakupow = [\"masło\", \"chleb\", \"szynka\"]"))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_welcome), _translate("Form", "Lista"))
        self.TextEditSlicing.setPlainText(_translate("Form", "Sytuacja ma się podobnie jak w przypadku zmiennych tekstowych. Aby dostać się do pojedyńczego elementu wystarczy wykorzystać nawiasy kwadratowe (pamiętajmy, że zaczynamy liczenie od zera!).\n"
"oceny[0] - pierwszy element\n"
"oceny[1] - drugi element\n"
"Teraz możemy na przykład wypisać do konsoli ten element:\n"
"\n"
"print(oceny[0])\n"
"\n"
"Możemy też edytować jakiś element (poprawić ocenę):\n"
"\n"
"oceny[2] = 6\n"
"\n"
"Aby dostać się do ostateniego elementu możemy użyć oceny[-1] - zaczynamy wtedy liczenie od ostateniego elementu. oceny[-2] oznacza przed ostatni element. "))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_slicing), _translate("Form", "Pojedyńczy element"))
        self.TextEditSumLen.setPlainText(_translate("Form", "W przypadku funkcji len, sytuacja jest podobna jak w zmiennych tekstowych. W łatwy sposób możemy policzyć ile elementów ma nasza lista.\n"
"\n"
"len(oceny) - zwraca wartość 3, co oznacza, że mamy 3 oceny w naszej liście.\n"
"\n"
"Inną rzeczą którą możemy policzyć w bardzo podobny sposób jest suma wszystkich elementów. Oczywiście liczenie sumy ma tylko sens, gdy mówimy o liczbach. Tekstu nie da się w ten sposób dodać, a już na pewno nie trochę tekstu, a trochę liczb.\n"
"\n"
"sum(oceny) - zwraca nam sumę wszystkich elementów naszej listy\n"
"\n"
"Oba elementy możemy wykorzystać w jakiś poważniejszych obliczeniach lub w miejscach, gdzie normalnie wpisalibyśmy liczbę. "))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_sum_len), _translate("Form", "sum i len"))
        self.pushButtonExercise1.setText(_translate("Form", "Sprawdź"))
        self.TextEditExercise1.setPlainText(_translate("Form", "Pierwsze zadanie!\n"
"\n"
"Policz średnią ocen ze zmiennej oceny.\n"
"\n"
"oceny = [3, 4, 6]\n"
"\n"
"Wykorzystaj sum i len do tego zadania (najlepiej, zwłaszcza, gdyby ocen było dużo więcej)"))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_exercise1), _translate("Form", "Zadanie 1"))
        self.TextEditIterations.setPlainText(_translate("Form", "Zgodnie z tym co mówiłem lista pozwala powiązać ze sobą wszystkie elementy. Dlatego też twórcy języka wymyślili sposób, aby przejść przez wszystkie elementy w wygodny sposób. Do tego służy instrukcja for.\n"
"\n"
"for ocena in oceny:\n"
"    if ocena >=5:\n"
"        print(ocena)\n"
"\n"
"ocena - to nazwa zmiennej, którą będziemy nazywać każdą poszczególną ocenę z naszej listy. Na raz zajmujemy się tylko jedną oceną i gdy już skończymy się nią zajmować, przechodzimy do następnej, aż przejdziemy przez wszystkie oceny w liście. \n"
"W drugiej linijce sprawdzamy, czy dana ocena jest większa bądź równa 5. Jeśli tak jest, to ją wypisujemy. W efekcie mamy kawałek kodu, który wypisuje oceny od 5 w górę.\n"
"\n"
"Dzięki instrukcji for możemy sprawdzić czy jakaś wartość znajduje się w naszej liście, możemy podliczyć sumę określonych elementów lub utworzyć inną listę z tylko niektórymi elementami. Zastosowań jest wiele więcej i ciężko je wymyślić wszystkie."))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_iterations), _translate("Form", "for"))
        self.TextEditNestedIf.setPlainText(_translate("Form", "Lista podobnie jak zmienna tekstowa ma swoje własne funkcje, którę możemy na niej wykonać. \n"
"\n"
"append pozwoli nam na dodanie nowych elementów\n"
"oceny.append(1) -  doda 1 do naszych ocen na sam koniec\n"
"\n"
"pop usuwa ostatni element i zwraca jego wartość\n"
"oceny.pop() - polecenie usunie ostatni element z listy, ale można go wykorzystać przed jego usunięciem\n"
"\n"
"oceny.append((oceny.pop()+5)/2) - polecenie usunie ostatnią jedynkę z naszych ocen, a w jej miejsce wstawi średnią z 1 i 5. Uczeń poprawił 1 na 5, a nauczyciel w miejsce ostatniej oceny wstawił średnią - trójkę.\n"
"\n"
"count zlicza ilość wystąpienia danej wartości\n"
"oceny.count(5) - policzy ile uczeń ma piątek\n"
"\n"
"sort - posortuje nam nasze wartości rosnąco, od najmniejszej do nawiększej\n"
"oceny.sort()\n"
"\n"
"reverse - odwraca kolejność elementów ostatni będą pierwszymi\n"
"oceny.reverse()"))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_nested_if), _translate("Form", "Funkcje listy"))
        self.TextEditExercise2.setPlainText(_translate("Form", "Drugie zadanie!\n"
"Jaką liczbę zwróci do konsoli następujący kod:\n"
"\n"
"a = [2,3,4]\n"
"for i in range(4):\n"
"    a.append(3)\n"
"\n"
"print(len(a))"))
        self.pushButtonExercise2.setText(_translate("Form", "Sprawdź"))
        self.tabWidgetLists.setTabText(self.tabWidgetLists.indexOf(self.tab_exercise2), _translate("Form", "Zadanie 2"))
import obrazki.obrazki_functions
