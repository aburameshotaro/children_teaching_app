# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'exceptions.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(654, 494)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidgetExceptions = QtWidgets.QTabWidget(self)
        self.tabWidgetExceptions.setObjectName("tabWidgetExceptions")
        self.tab_welcome = QtWidgets.QWidget()
        self.tab_welcome.setObjectName("tab_welcome")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_welcome)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.TextEditWelcome = QtWidgets.QPlainTextEdit(self.tab_welcome)
        self.TextEditWelcome.setObjectName("TextEditWelcome")
        self.gridLayout_2.addWidget(self.TextEditWelcome, 2, 0, 1, 1)
        self.WelcomeImg = QtWidgets.QLabel(self.tab_welcome)
        self.WelcomeImg.setMaximumSize(QtCore.QSize(16777215, 175))
        self.WelcomeImg.setText("")
        self.WelcomeImg.setPixmap(QtGui.QPixmap(":/exceptions/dotNetException.png"))
        self.WelcomeImg.setObjectName("WelcomeImg")
        self.gridLayout_2.addWidget(self.WelcomeImg, 3, 0, 1, 1)
        self.tabWidgetExceptions.addTab(self.tab_welcome, "")
        self.tab_try_except = QtWidgets.QWidget()
        self.tab_try_except.setObjectName("tab_try_except")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_try_except)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.IfImg = QtWidgets.QLabel(self.tab_try_except)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.IfImg.sizePolicy().hasHeightForWidth())
        self.IfImg.setSizePolicy(sizePolicy)
        self.IfImg.setMinimumSize(QtCore.QSize(0, 200))
        self.IfImg.setMaximumSize(QtCore.QSize(600, 220))
        self.IfImg.setText("")
        self.IfImg.setPixmap(QtGui.QPixmap(":/exceptions/Python-try-except-Syntax.png"))
        self.IfImg.setObjectName("IfImg")
        self.gridLayout_3.addWidget(self.IfImg, 1, 0, 1, 1)
        self.TextEditIf = QtWidgets.QPlainTextEdit(self.tab_try_except)
        self.TextEditIf.setMinimumSize(QtCore.QSize(0, 188))
        self.TextEditIf.setObjectName("TextEditIf")
        self.gridLayout_3.addWidget(self.TextEditIf, 0, 0, 1, 1)
        self.tabWidgetExceptions.addTab(self.tab_try_except, "")
        self.tab_example_division = QtWidgets.QWidget()
        self.tab_example_division.setObjectName("tab_example_division")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_example_division)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.TextEditExample = QtWidgets.QPlainTextEdit(self.tab_example_division)
        self.TextEditExample.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditExample.setObjectName("TextEditExample")
        self.gridLayout_4.addWidget(self.TextEditExample, 0, 0, 1, 1)
        self.ExampleImg = QtWidgets.QLabel(self.tab_example_division)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExampleImg.sizePolicy().hasHeightForWidth())
        self.ExampleImg.setSizePolicy(sizePolicy)
        self.ExampleImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ExampleImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ExampleImg.setText("")
        self.ExampleImg.setPixmap(QtGui.QPixmap(":/exceptions/divisionByZero.jpg"))
        self.ExampleImg.setObjectName("ExampleImg")
        self.gridLayout_4.addWidget(self.ExampleImg, 1, 0, 1, 1)
        self.tabWidgetExceptions.addTab(self.tab_example_division, "")
        self.tab_exercise1 = QtWidgets.QWidget()
        self.tab_exercise1.setObjectName("tab_exercise1")
        self.pushButtonExercise1 = QtWidgets.QPushButton(self.tab_exercise1)
        self.pushButtonExercise1.setGeometry(QtCore.QRect(190, 270, 131, 23))
        self.pushButtonExercise1.setObjectName("pushButtonExercise1")
        self.TextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.TextEditExercise1.setGeometry(QtCore.QRect(60, 30, 461, 171))
        self.TextEditExercise1.setObjectName("TextEditExercise1")
        self.labelExercise1 = QtWidgets.QLabel(self.tab_exercise1)
        self.labelExercise1.setGeometry(QtCore.QRect(60, 330, 451, 41))
        self.labelExercise1.setText("")
        self.labelExercise1.setObjectName("labelExercise1")
        self.lineEditExercise1 = QtWidgets.QLineEdit(self.tab_exercise1)
        self.lineEditExercise1.setGeometry(QtCore.QRect(60, 230, 461, 20))
        self.lineEditExercise1.setObjectName("lineEditExercise1")
        self.tabWidgetExceptions.addTab(self.tab_exercise1, "")
        self.tab_else = QtWidgets.QWidget()
        self.tab_else.setObjectName("tab_else")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_else)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.TextEditConditions = QtWidgets.QPlainTextEdit(self.tab_else)
        self.TextEditConditions.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditConditions.setObjectName("TextEditConditions")
        self.gridLayout_6.addWidget(self.TextEditConditions, 0, 0, 1, 1)
        self.ConditionsImg = QtWidgets.QLabel(self.tab_else)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConditionsImg.sizePolicy().hasHeightForWidth())
        self.ConditionsImg.setSizePolicy(sizePolicy)
        self.ConditionsImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ConditionsImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ConditionsImg.setText("")
        self.ConditionsImg.setPixmap(QtGui.QPixmap(":/exceptions/Python-try-except-else-Syntax.png"))
        self.ConditionsImg.setObjectName("ConditionsImg")
        self.gridLayout_6.addWidget(self.ConditionsImg, 1, 0, 1, 1)
        self.tabWidgetExceptions.addTab(self.tab_else, "")
        self.tab_nested_if = QtWidgets.QWidget()
        self.tab_nested_if.setObjectName("tab_nested_if")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_nested_if)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.TextEditNestedIf = QtWidgets.QPlainTextEdit(self.tab_nested_if)
        self.TextEditNestedIf.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditNestedIf.setObjectName("TextEditNestedIf")
        self.gridLayout_5.addWidget(self.TextEditNestedIf, 0, 0, 1, 2)
        self.NestedIfImg = QtWidgets.QLabel(self.tab_nested_if)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.NestedIfImg.sizePolicy().hasHeightForWidth())
        self.NestedIfImg.setSizePolicy(sizePolicy)
        self.NestedIfImg.setMinimumSize(QtCore.QSize(0, 0))
        self.NestedIfImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.NestedIfImg.setText("")
        self.NestedIfImg.setPixmap(QtGui.QPixmap(":/exceptions/Python-Exception-try-except-else-finally-Syntax.png"))
        self.NestedIfImg.setObjectName("NestedIfImg")
        self.gridLayout_5.addWidget(self.NestedIfImg, 1, 0, 2, 2)
        self.tabWidgetExceptions.addTab(self.tab_nested_if, "")
        self.gridLayout.addWidget(self.tabWidgetExceptions, 0, 0, 1, 1)

        self.retranslateUi()
        self.tabWidgetExceptions.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setCentralWidget(self.tabWidgetExceptions) 

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Wyjątki"))
        self.TextEditWelcome.setPlainText(_translate("Form", "Nie wszystko w naszym programie będzie szło zgodnie z planem. Czasami użytkownicy będą wykorzystywali nasz program niezgodnie z przeznaczeniem. I w tym celu powstał system, który nazywa się wyjątkami.\n"
"Wyłapywanie wyjątków pozwala nam na zareagowanie na problemy, które pojawią się w trakcie wykonywania naszego kodu. Cytując klasyka: \"oczekuj tego, co nieoczekiwane i bądź na to przygotowany.\" Tak dokładnie jest z wyjątkami. \n"
"\n"
"Niewielu z was pewnie miało okazję pograć w PBF(play-by-forum). Tam wcielamy się w stworzonego przez nas bohatera w wybranym przez nas uniwersum. Naszą postać kontrolujemy poprzez pisanie postów na forum. Kiedy jesteśmy na niebezpiecznej misji, nie wiemy co się zaraz wydarzy. Również musimy przygotować się na wszystko, dlatego na samym końcu piszemy kilka \"jeśli\", które mają zakończyć wcześniej wykonywane polecenia i przejść bezpośrednio do nich:\n"
"- jeśli zaatakują mnie wilki, wyciągam miecz i przygotowuję pozycję obronną\n"
"- jeśli napadną mnie złodzieje, staram się ich zastraszyć groźną miną\n"
"- jeśli po drodze napotkam karczmę, wchodzę do środka.\n"
"Wszystkie te akcje zakończą aktualnie wykonywaną czynność (wędrówkę głównym traktem) i rozpoczną sekwencję, która ma nas uchronić przed problemami. \n"
"\n"
"Jeśli nie przygotujemy się na możliwość błędów, nasz program w sytuacji kryzysowej po prostu się wyłączy bez żadnej informacji. Nikt nie będzie wiedział, co ma zrobić w takiej sytuacji. I przy drugim podejściu pewnie powtórzy ten sam błąd i da nam ocenę 1 w internecie."))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_welcome), _translate("Form", "Nieoczekiwane"))
        self.TextEditIf.setPlainText(_translate("Form", "Przejdźmy zatem do konstrukcji. \n"
"\n"
"try:\n"
"    kod_ktory_moze_wyrzucic_blad()\n"
"    ...\n"
"except NazwaBleduKtoregoSieSpodziewamy:\n"
"    co_ma_wtedy_zrobic()\n"
"    ...\n"
"\n"
"Za pomocą słówka try ogłaszamy, że będziemy korzystać z systemu wyłapywania błędów. Po słówka try mamy dwukropek i później od nowej linii musimy zrobić wcięcie. Od wcięcia będzie się teraz zaczynał kod, który może sprawiać problemy, zgłaszać wyjątki. Try oznacza z angielskiego spróbuj. Czyli będziemy próbowali wykonać kod, który po nim następuje.\n"
"\n"
"Kolejną część zaczynamy od słówka except i ponownie wracamy do lewej strony. Po tym słówku piszemy nazwę błędu, którego się spodziewamy. Można robić ogólne zapytania nie podając nazwy błędu, ale nie jest to wskazane, gdyż możemy przechwycić błędy, z którym nie będziemy wiedzieli co zrobić, a co więcej nigdzie wtedy nie pokaże się komunikat, że coś poszło nie tak. Ogólnie powinniśmy wychwytywać tylko te błędy, z którymi potrafimy sobie poradzić. \n"
"Na koniec piszemy, co mamy zrobić w przypadku wystąpienie błędu, którego się spodziewaliśmy."))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_try_except), _translate("Form", "try except"))
        self.TextEditExample.setPlainText(_translate("Form", "Jednym z najprostszych przykładów będzie dotyczył dzielenia. Przedstawię go poniżej. Pytamy użytkownika o dzielną i dzielnik, a wynik wypisujemy do konsoli(pamiętajmy o zamianie podanych przez użytkownika danych na int):\n"
"\n"
"liczba1 = int(input(\"Podaj dzielną\"))\n"
"liczba2 = int(input(\"Podaj dzielnik\"))\n"
"print(liczba1/liczba2)\n"
"\n"
"Co tutaj może pójść nie tak? Co najmniej dwie rzeczy. Pierwszą z nich omówiliśmy już co nieco podczas wcześniejszych lekcji. Użytkownik mógł nie podać liczby, a dowolny tekst. W tym przypadku dostaniemy błąd ValueError.\n"
"Co do drugiego błędu, możemy się go domyślić jeśli uważaliśmy na matematyce. Związany z nim był nawet pewien wierszyk: \"pamiętaj cholero nie dziel przez zero\". Jeśli użytkownik jako drugą liczbę poda 0, to ciężko będzie ustalić jaki wynik powinien otrzymać.\n"
"\n"
"try:\n"
"    liczba1 = int(input(\"Podaj dzielną\"))\n"
"    liczba2 = int(input(\"Podaj dzielnik\"))\n"
"    print(liczba1/liczba2)\n"
"except TypeError:\n"
"    print(\'Musisz podać dwie liczby do dzielenia\')\n"
"except ZeroDivisionError:\n"
"    print(\'Pamiętaj cholero nie dziel przez zero\')"))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_example_division), _translate("Form", "Przykład"))
        self.pushButtonExercise1.setText(_translate("Form", "Sprawdź"))
        self.TextEditExercise1.setPlainText(_translate("Form", "Pierwsze zadanie!\n"
"Podaj liczbę, która będzie przechowywana w zmiennej liczba2. Sprawdź działanie poniższego kodu.\n"
"\n"
"try:\n"
"    liczba1 = 100\n"
"    liczba2 = int(input(\"Podaj dzielnik\"))\n"
"    print(liczba1/liczba2)\n"
"except ValueError:\n"
"    print(\'Dzielenie wykonywane jest na liczbach\')\n"
"except ZeroDivisionError:\n"
"    print(\'Pamiętaj cholero nie dziel przez zero\')"))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_exercise1), _translate("Form", "Zadanie 1"))
        self.TextEditConditions.setPlainText(_translate("Form", "Przy bloku try mamy możliwość z korzystania z else w następujący sposób:\n"
"\n"
"try:\n"
"    ...\n"
"except ErrorName:\n"
"    ...\n"
"else:\n"
"    wykonaj_gdy_nie_ma_bledu()\n"
"\n"
"Blok else wykona się tylko wtedy, gdy w try nie wygeneruje się  żaden błąd. Możemy wykorzystać go, aby zanotować gdzieś, że operacja się udała. Blok else nie jest wymagany."))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_else), _translate("Form", "else"))
        self.TextEditNestedIf.setPlainText(_translate("Form", "Kolejną możliwością jest użycie słówka finally. Budowa jest bardzo podobna do tego z else. \n"
"\n"
"try:\n"
"    ...\n"
"except:\n"
"    ...\n"
"finally:\n"
"    ...\n"
"\n"
"Kod z finally wykona się bez względu na to czy pojawił się jakiś błąd lub nie. To jest dobre miejsce aby zamknąć dostęp do pliku, który otwieramy w try lub miejsce na kod, który musi się wykonać przed zakończeniem. Możemy też wyświetlić tutaj komunikat użytkownikowi, co udało się wykonać i ewentualnie czego nie udało się zrobić."))
        self.tabWidgetExceptions.setTabText(self.tabWidgetExceptions.indexOf(self.tab_nested_if), _translate("Form", "finally"))
import obrazki.obrazki_exceptions
