# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'strings.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(649, 494)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidgetTextVariables = QtWidgets.QTabWidget(self)
        self.tabWidgetTextVariables.setObjectName("tabWidgetTextVariables")
        self.tab_welcome = QtWidgets.QWidget()
        self.tab_welcome.setObjectName("tab_welcome")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_welcome)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.TextEditWelcomeStrings = QtWidgets.QPlainTextEdit(self.tab_welcome)
        self.TextEditWelcomeStrings.setObjectName("TextEditWelcomeStrings")
        self.gridLayout_2.addWidget(self.TextEditWelcomeStrings, 2, 0, 1, 1)
        self.WelcomeStringsImg = QtWidgets.QLabel(self.tab_welcome)
        self.WelcomeStringsImg.setText("")
        self.WelcomeStringsImg.setPixmap(QtGui.QPixmap(":/Strings/string.jpg"))
        self.WelcomeStringsImg.setObjectName("WelcomeStringsImg")
        self.gridLayout_2.addWidget(self.WelcomeStringsImg, 3, 0, 1, 1)
        self.tabWidgetTextVariables.addTab(self.tab_welcome, "")
        self.tab_adding_text = QtWidgets.QWidget()
        self.tab_adding_text.setObjectName("tab_adding_text")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_adding_text)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.TextAddingImg = QtWidgets.QLabel(self.tab_adding_text)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TextAddingImg.sizePolicy().hasHeightForWidth())
        self.TextAddingImg.setSizePolicy(sizePolicy)
        self.TextAddingImg.setMinimumSize(QtCore.QSize(0, 200))
        self.TextAddingImg.setMaximumSize(QtCore.QSize(556, 220))
        self.TextAddingImg.setText("")
        self.TextAddingImg.setPixmap(QtGui.QPixmap(":/Strings/addingStrings.PNG"))
        self.TextAddingImg.setObjectName("TextAddingImg")
        self.gridLayout_3.addWidget(self.TextAddingImg, 1, 0, 1, 1)
        self.TextEditAddingText = QtWidgets.QPlainTextEdit(self.tab_adding_text)
        self.TextEditAddingText.setMinimumSize(QtCore.QSize(0, 188))
        self.TextEditAddingText.setObjectName("TextEditAddingText")
        self.gridLayout_3.addWidget(self.TextEditAddingText, 0, 0, 1, 1)
        self.tabWidgetTextVariables.addTab(self.tab_adding_text, "")
        self.tab_string_as_array = QtWidgets.QWidget()
        self.tab_string_as_array.setObjectName("tab_string_as_array")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_string_as_array)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.TextEditTextSlicing = QtWidgets.QPlainTextEdit(self.tab_string_as_array)
        self.TextEditTextSlicing.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditTextSlicing.setObjectName("TextEditTextSlicing")
        self.gridLayout_4.addWidget(self.TextEditTextSlicing, 0, 0, 1, 1)
        self.TextSlicingImg = QtWidgets.QLabel(self.tab_string_as_array)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TextSlicingImg.sizePolicy().hasHeightForWidth())
        self.TextSlicingImg.setSizePolicy(sizePolicy)
        self.TextSlicingImg.setMinimumSize(QtCore.QSize(0, 0))
        self.TextSlicingImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.TextSlicingImg.setText("")
        self.TextSlicingImg.setPixmap(QtGui.QPixmap(":/Strings/stringSlicing.PNG"))
        self.TextSlicingImg.setObjectName("TextSlicingImg")
        self.gridLayout_4.addWidget(self.TextSlicingImg, 1, 0, 1, 1)
        self.tabWidgetTextVariables.addTab(self.tab_string_as_array, "")
        self.tab_exercise1 = QtWidgets.QWidget()
        self.tab_exercise1.setObjectName("tab_exercise1")
        self.pushButtonExercise1 = QtWidgets.QPushButton(self.tab_exercise1)
        self.pushButtonExercise1.setGeometry(QtCore.QRect(230, 250, 131, 23))
        self.pushButtonExercise1.setObjectName("pushButtonExercise1")
        self.lineEditExercise1 = QtWidgets.QLineEdit(self.tab_exercise1)
        self.lineEditExercise1.setGeometry(QtCore.QRect(150, 200, 311, 20))
        self.lineEditExercise1.setObjectName("lineEditExercise1")
        self.TextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.TextEditExercise1.setGeometry(QtCore.QRect(120, 90, 381, 71))
        self.TextEditExercise1.setObjectName("TextEditExercise1")
        self.labelExercise1 = QtWidgets.QLabel(self.tab_exercise1)
        self.labelExercise1.setGeometry(QtCore.QRect(120, 320, 371, 31))
        self.labelExercise1.setText("")
        self.labelExercise1.setObjectName("labelExercise1")
        self.tabWidgetTextVariables.addTab(self.tab_exercise1, "")
        self.tab_len_string = QtWidgets.QWidget()
        self.tab_len_string.setObjectName("tab_len_string")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_len_string)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.TextEditGetValue = QtWidgets.QPlainTextEdit(self.tab_len_string)
        self.TextEditGetValue.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditGetValue.setObjectName("TextEditGetValue")
        self.gridLayout_5.addWidget(self.TextEditGetValue, 0, 0, 1, 2)
        self.GetValueImg = QtWidgets.QLabel(self.tab_len_string)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GetValueImg.sizePolicy().hasHeightForWidth())
        self.GetValueImg.setSizePolicy(sizePolicy)
        self.GetValueImg.setMinimumSize(QtCore.QSize(0, 0))
        self.GetValueImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.GetValueImg.setText("")
        self.GetValueImg.setPixmap(QtGui.QPixmap(":/Strings/stringLen.PNG"))
        self.GetValueImg.setObjectName("GetValueImg")
        self.gridLayout_5.addWidget(self.GetValueImg, 1, 0, 2, 2)
        self.tabWidgetTextVariables.addTab(self.tab_len_string, "")
        self.tab_exercise2 = QtWidgets.QWidget()
        self.tab_exercise2.setObjectName("tab_exercise2")
        self.TextEditExercise2 = QtWidgets.QPlainTextEdit(self.tab_exercise2)
        self.TextEditExercise2.setGeometry(QtCore.QRect(110, 40, 381, 71))
        self.TextEditExercise2.setObjectName("TextEditExercise2")
        self.pushButtonExercise2 = QtWidgets.QPushButton(self.tab_exercise2)
        self.pushButtonExercise2.setGeometry(QtCore.QRect(260, 230, 75, 23))
        self.pushButtonExercise2.setObjectName("pushButtonExercise2")
        self.lineEdit = QtWidgets.QLineEdit(self.tab_exercise2)
        self.lineEdit.setGeometry(QtCore.QRect(182, 170, 221, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.labelExercise2 = QtWidgets.QLabel(self.tab_exercise2)
        self.labelExercise2.setGeometry(QtCore.QRect(90, 300, 391, 31))
        self.labelExercise2.setObjectName("labelExercise2")
        self.tabWidgetTextVariables.addTab(self.tab_exercise2, "")
        self.tab_extra_info = QtWidgets.QWidget()
        self.tab_extra_info.setObjectName("tab_extra_info")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_extra_info)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.TextEditExtraInfo = QtWidgets.QPlainTextEdit(self.tab_extra_info)
        self.TextEditExtraInfo.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditExtraInfo.setObjectName("TextEditExtraInfo")
        self.gridLayout_6.addWidget(self.TextEditExtraInfo, 0, 0, 1, 1)
        self.ExtraInfoImg = QtWidgets.QLabel(self.tab_extra_info)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExtraInfoImg.sizePolicy().hasHeightForWidth())
        self.ExtraInfoImg.setSizePolicy(sizePolicy)
        self.ExtraInfoImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ExtraInfoImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ExtraInfoImg.setText("")
        self.ExtraInfoImg.setPixmap(QtGui.QPixmap(":/Strings/stringExtra.PNG"))
        self.ExtraInfoImg.setObjectName("ExtraInfoImg")
        self.gridLayout_6.addWidget(self.ExtraInfoImg, 1, 0, 1, 1)
        self.tabWidgetTextVariables.addTab(self.tab_extra_info, "")
        self.gridLayout.addWidget(self.tabWidgetTextVariables, 0, 0, 1, 1)

        self.retranslateUi()
        self.tabWidgetTextVariables.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setCentralWidget(self.tabWidgetTextVariables) 

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Zmienne tekstowe"))
        self.TextEditWelcomeStrings.setPlainText(_translate("Form", "Poznaliśmy już czym są zmienne. W tym rozdziale zajmiemy się tylko takimi, które przechowują wartości tekstowe. Mogą to być całe zdania, pojedyńcze słowa lub nawet pojedyńczy znak. \n"
"Sam tekst, który będziemy wkładać do zmiennych, będziemy oznaczali w cudzysłowiu, choćbyśmy kogoś cytowali. \n"
"A więc przypisanie tesktu do zmiennej wyglądałoby tak:\n"
"nazwa_zmiennej = \"Jakiś tekst\"\n"
"Wykorzystanie później zawartości zmiennej przebiega na tej samej zasadzie, którą poznaliśmy w rodziale zmienne. Wystarczy napisać w programie nazwę zmiennej i komputer zamieni ją na jej zawartość.\n"
"print(nazwa_zmiennej) - taka funkcja pokaże nam co mamy w środku naszej zmiennej"))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_welcome), _translate("Form", "Tekst!"))
        self.TextEditAddingText.setPlainText(_translate("Form", "Na zmiennych tekstowych będziemy mogli wykonywać mnóstwo różnych operacji. Jeśli chcecie aby ktoś w przyszłości płacił wam za tworzenie programów, to te programy będą musiały umieć nieco więcej niż tylko mówienie: \"Hello World!\".\n"
"Jedną z takich możliwości będzie dodawanie do siebie tekstu, innymi słowy łączenie kilku ciągów znaków. Często zdarzy się tak, że jakaś część tekstu będzie w jednej zmiennej, a pozostała w drugiej i będziemy chcieli go złączyć. Do tego celu wykorzystamy symbol \"+\".\n"
"Oto przykład:\n"
"imie = \"Sebastian\"\n"
"nazwisko = \"Tomczok\"\n"
"print( imie + nazwisko)\n"
"W tym miejscu musimy natomiast nauczyć się myśleć jak komputer. Komputer nie będzie wiedział, że są to dwa osobne słowa i nie wstawi między nimi spacji. Połączy je tak, jak są napisane. Rolą programisty jest zadbanie o odpowiednią obróbkę tekstu. Odpowiednie wyświetlenie powyższych danych byłoby tak: \n"
"print(imie + \" \" + nazwisko)\n"
"Jak widzimy powyżej do zmiennej tekstowej możemy dodać również czysty tekst. Ostatecznie wszystko sprowadza się do dodawania czystego tekstu - zmienne są zamieniane na wartości, które obecnie się w nich znajdują. Czyli nasz kod zostanie przez komputer zinterpretowany jako:\n"
"print(\"Sebastian\" + \" \" + \"Tomczok\")"))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_adding_text), _translate("Form", "Dodawanie tekstu"))
        self.TextEditTextSlicing.setPlainText(_translate("Form", "Nie zawsze musimy chcieć wykorzystać całą naszą zmienną tekstową. Czasami będziemy chcieli wykorzystać tylko jakiś jej fragment albo tylko jedną literkę. Są one traktowane jak tablice - głębiej zrozumiemy to zdanie gdy dojdziemy do list. \n"
"Aby odwołać się do poszczególnej literki z zmiennej tekstowej wykorzystamy nawiasy kwadratowe.\n"
"krol_polnocy = \"Jon Snow\"\n"
"print(krol_polnocy[1])\n"
"I po takim kodzie moglibyśmy pomyśleć, że komputer weźmie pierwszą literkę ze stringa \"Jon Snow\". No ale komputery zaczynają liczenie od 0. Dlatego krol_polnocy[1] to tak na prawdę druga litera zmiennej, czyli w naszym wypadku \"o\". Żeby odwowałać się do trzeciej litery napisalibyśmy krol_polnocy[2].\n"
"Możemy też wziąć większy fragment tekstu. Ten mechanizm również wykorzystuje nawiasy kwadratowe.\n"
"krol_polnocy[0:3] - tym razem zaczynamy od 0 literki (pierwszej) i kończymy na 3 (czwartej, ale czwartej już nie wliczamy), czyli otrzymamy słowo \"Jon\"."))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_string_as_array), _translate("Form", "Tekst jako pojedyńcze literki"))
        self.pushButtonExercise1.setText(_translate("Form", "Gotowe"))
        self.lineEditExercise1.setPlaceholderText(_translate("Form", "Wpisz działanie"))
        self.TextEditExercise1.setPlainText(_translate("Form", "Pierwsze zadanie!\n"
"Spróbuj wyciągnąć ze zmiennej quote słowo niebo za pomocą nawiasów kwadratowych.\n"
"quote = \"Mylisz niebo z gwiazdami odbitymi nocą na powierzchni stawu.\""))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_exercise1), _translate("Form", "Zadanie 1"))
        self.TextEditGetValue.setPlainText(_translate("Form", "Czasami będziemy chcieli sprawdzić długość naszego tekstu. W języku python jest do tego specjalna funkcja o nazwie len(). Aby ją wykorzystać wstawiamy do jej środka, jako argument tekst, który chcemy przeliczyć. Może też być nazwa zmiennej zawierająca tekst.\n"
"len(\"Policzmy ile znaków zawiera to zdanie.\")\n"
"Funkcja len liczy długość naszego ciągu (zarówno ilość liter, spacji, kropek i przecinków itd. jednym słowem wszystkich znaków). Zatem wynik powyższej funkcji wyniesie 38. A z tą liczbą możemy już wykonać dowolne działanie. Możemy zagnieździć go w kolejnej funkcji, aby np. wypisać go do konsoli:\n"
"print( len(\"Policzmy ile znaków zawiera to zdanie.\") )\n"
"Ale równie dobrze możemy go wykorzystać w jakimś skomplikowanym działaniu. Po wykoniu funkcji len w jej miejsce otrzymujemy zwykłą liczbę, którą możemy dowolnie wykorzystać:\n"
"len(\"Policzmy ile znaków zawiera to zdanie.\") * 52 +21\n"
"Funkcja len przyda nam się też do mierzania długości innych rzeczy, if you know what I mean."))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_len_string), _translate("Form", "Długość"))
        self.TextEditExercise2.setPlainText(_translate("Form", "Drugie zadanie!\n"
"Policz jaki będzie wynik następującego działania:\n"
"len(\"Geralt\") * len(\"Ciri\") / 2"))
        self.pushButtonExercise2.setText(_translate("Form", "Uruchom"))
        self.labelExercise2.setText(_translate("Form", ""))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_exercise2), _translate("Form", "Zadanie 2"))
        self.TextEditExtraInfo.setPlainText(_translate("Form", "Python zapewnia nam dodatkowo kilka funkcji, które możemy wykonać na naszym tekście. Tym razem mamy trochę inny zapis. Zaczynamy od naszego tekstu, a później po kropce piszemy nazwę funkcji i nawiasy.\n"
"\"ala ma kota\".upper() - zamienia litery na duże\n"
"\"ALA MA KOTA\".lower() - zamienia litery na małe\n"
"\"ala ma kota\".title() - zamienia pierwszą literę na dużą\n"
"\"ala ma kota\".replace(\"kota\", \"psa\") - zamienia każde wystąpienie słowa \"kota\" na psa\n"
"Cały czas możemy też wykorzystywać do tego zmienne. Tutaj nic się nie zmieniło.\n"
"zdanie = \"ala ma kota\"\n"
"zdanie.upper()\n"
"Jeśli natomiast chcemy zmienić zawartość zmiennej, to trzeba by było to zrobić tak:\n"
"zdanie = zdanie.upper()"))
        self.tabWidgetTextVariables.setTabText(self.tabWidgetTextVariables.indexOf(self.tab_extra_info), _translate("Form", "Dodatkowe funkcje"))

import obrazki.obrazki_strings

