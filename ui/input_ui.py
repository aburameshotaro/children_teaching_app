# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'input.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(654, 494)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidgetUserInput = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidgetUserInput.setObjectName("tabWidgetUserInput")
        self.tab_welcome = QtWidgets.QWidget()
        self.tab_welcome.setObjectName("tab_welcome")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_welcome)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.TextEditWelcome = QtWidgets.QPlainTextEdit(self.tab_welcome)
        self.TextEditWelcome.setObjectName("TextEditWelcome")
        self.gridLayout_2.addWidget(self.TextEditWelcome, 2, 0, 1, 1)
        self.WelcomeImg = QtWidgets.QLabel(self.tab_welcome)
        self.WelcomeImg.setText("")
        self.WelcomeImg.setPixmap(QtGui.QPixmap(":/input/welcome.jpg"))
        self.WelcomeImg.setObjectName("WelcomeImg")
        self.gridLayout_2.addWidget(self.WelcomeImg, 3, 0, 1, 1)
        self.tabWidgetUserInput.addTab(self.tab_welcome, "")
        self.tab_input = QtWidgets.QWidget()
        self.tab_input.setObjectName("tab_input")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_input)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.InputImg = QtWidgets.QLabel(self.tab_input)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputImg.sizePolicy().hasHeightForWidth())
        self.InputImg.setSizePolicy(sizePolicy)
        self.InputImg.setMinimumSize(QtCore.QSize(0, 200))
        self.InputImg.setMaximumSize(QtCore.QSize(600, 250))
        self.InputImg.setText("")
        self.InputImg.setPixmap(QtGui.QPixmap(":/input/input.PNG"))
        self.InputImg.setObjectName("InputImg")
        self.gridLayout_3.addWidget(self.InputImg, 1, 0, 1, 1)
        self.TextEditInput = QtWidgets.QPlainTextEdit(self.tab_input)
        self.TextEditInput.setMinimumSize(QtCore.QSize(0, 188))
        self.TextEditInput.setObjectName("TextEditInput")
        self.gridLayout_3.addWidget(self.TextEditInput, 0, 0, 1, 1)
        self.tabWidgetUserInput.addTab(self.tab_input, "")
        self.tab_type_of_input = QtWidgets.QWidget()
        self.tab_type_of_input.setObjectName("tab_type_of_input")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_type_of_input)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.TextEditElse = QtWidgets.QPlainTextEdit(self.tab_type_of_input)
        self.TextEditElse.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditElse.setObjectName("TextEditElse")
        self.gridLayout_4.addWidget(self.TextEditElse, 0, 0, 1, 1)
        self.ElseImg = QtWidgets.QLabel(self.tab_type_of_input)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ElseImg.sizePolicy().hasHeightForWidth())
        self.ElseImg.setSizePolicy(sizePolicy)
        self.ElseImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ElseImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ElseImg.setText("")
        self.ElseImg.setPixmap(QtGui.QPixmap(":/input/typeInput.PNG"))
        self.ElseImg.setObjectName("ElseImg")
        self.gridLayout_4.addWidget(self.ElseImg, 1, 0, 1, 1)
        self.tabWidgetUserInput.addTab(self.tab_type_of_input, "")
        self.tab_exercise1 = QtWidgets.QWidget()
        self.tab_exercise1.setObjectName("tab_exercise1")
        self.pushButtonExercise1 = QtWidgets.QPushButton(self.tab_exercise1)
        self.pushButtonExercise1.setGeometry(QtCore.QRect(220, 250, 131, 23))
        self.pushButtonExercise1.setObjectName("pushButtonExercise1")
        self.TextEditExercise1 = QtWidgets.QPlainTextEdit(self.tab_exercise1)
        self.TextEditExercise1.setGeometry(QtCore.QRect(90, 60, 401, 121))
        self.TextEditExercise1.setObjectName("TextEditExercise1")
        self.labelExercise1 = QtWidgets.QLabel(self.tab_exercise1)
        self.labelExercise1.setGeometry(QtCore.QRect(90, 310, 391, 41))
        self.labelExercise1.setText("")
        self.labelExercise1.setObjectName("labelExercise1")
        self.lineEditExercise1 = QtWidgets.QLineEdit(self.tab_exercise1)
        self.lineEditExercise1.setGeometry(QtCore.QRect(140, 210, 311, 20))
        self.lineEditExercise1.setObjectName("lineEditExercise1")
        self.tabWidgetUserInput.addTab(self.tab_exercise1, "")
        self.tab_conditions = QtWidgets.QWidget()
        self.tab_conditions.setObjectName("tab_conditions")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_conditions)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.TextEditConditions = QtWidgets.QPlainTextEdit(self.tab_conditions)
        self.TextEditConditions.setMinimumSize(QtCore.QSize(0, 0))
        self.TextEditConditions.setObjectName("TextEditConditions")
        self.gridLayout_6.addWidget(self.TextEditConditions, 0, 0, 1, 1)
        self.ConditionsImg = QtWidgets.QLabel(self.tab_conditions)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConditionsImg.sizePolicy().hasHeightForWidth())
        self.ConditionsImg.setSizePolicy(sizePolicy)
        self.ConditionsImg.setMinimumSize(QtCore.QSize(0, 0))
        self.ConditionsImg.setMaximumSize(QtCore.QSize(16777215, 250))
        self.ConditionsImg.setText("")
        self.ConditionsImg.setPixmap(QtGui.QPixmap(":/input/isdigit.PNG"))
        self.ConditionsImg.setObjectName("ConditionsImg")
        self.gridLayout_6.addWidget(self.ConditionsImg, 1, 0, 1, 1)
        self.tabWidgetUserInput.addTab(self.tab_conditions, "")
        self.tab_exercise2 = QtWidgets.QWidget()
        self.tab_exercise2.setObjectName("tab_exercise2")
        self.TextEditExercise2 = QtWidgets.QPlainTextEdit(self.tab_exercise2)
        self.TextEditExercise2.setGeometry(QtCore.QRect(100, 40, 391, 141))
        self.TextEditExercise2.setObjectName("TextEditExercise2")
        self.pushButtonExercise2 = QtWidgets.QPushButton(self.tab_exercise2)
        self.pushButtonExercise2.setGeometry(QtCore.QRect(220, 240, 75, 23))
        self.pushButtonExercise2.setObjectName("pushButtonExercise2")
        self.lineEditExercise2 = QtWidgets.QLineEdit(self.tab_exercise2)
        self.lineEditExercise2.setGeometry(QtCore.QRect(160, 200, 221, 20))
        self.lineEditExercise2.setObjectName("lineEditExercise2")
        self.labelExercise2 = QtWidgets.QLabel(self.tab_exercise2)
        self.labelExercise2.setGeometry(QtCore.QRect(90, 300, 381, 41))
        self.labelExercise2.setText("")
        self.labelExercise2.setObjectName("labelExercise2")
        self.tabWidgetUserInput.addTab(self.tab_exercise2, "")
        self.gridLayout.addWidget(self.tabWidgetUserInput, 0, 0, 1, 1)

        self.retranslateUi()
        self.tabWidgetUserInput.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setCentralWidget(self.centralwidget)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Kontakt z użytkownikiem"))
        self.TextEditWelcome.setPlainText(_translate("Form", "Z każdym kolejnym rozdziałem nasze aplikacje zyskują potencjał, aby być coraz bardziej zaawansowane. Cały czas jak dotąd nasz kod wykonywał się bez żadnej ingerencji użytkownika programu. Można by to porównać do filmu, gdzie widz nie ma wpływu na to co wydarzy się na ekranie. Natomiast zdobywszy wiedzę z tego rozdziału, będziemy mogli tworzyć proste gry! Czyż to nie wspaniale?\n"
"Będziemy mogli tworzyć również proste menu jak i personalizować nasz program.\n"
"Możliwości jest ogrom - ogranicza nas tylko nasza wyobraźnia. Kontakt z użytkownikiem można wykonać na wiele różnych sposobów. Podczas tej lekcji poznamy najbardziej prymitywny, wykorzystujący konsolę.\n"
"A kim jest użytkownik naszej aplikacji? To osoba, która będzie korzystała z naszego programu, gdy już skończymy go ulepszać. Ostatecznie my sami możemy być użytkownikami naszych aplikacji, ale może będziemy chcieli udostępnić nasz program innym. Wy jesteście użytkownikami mojego programu, dlatego też starałem się, aby wasza przygoda z nim była jak najciekawsza i pozbawiona wszelkich problemów.\n"
"Praca programisty często można porównać z pracą wróżki. Programista musi przewidzieć wszystkie ruchy użytkownika aplikacji. Musi być kilka kroków przed nim. Użytkownicy nie zawsze będą korzystać z aplikacji zgodnie z przeznaczeniem, co może przysporzyć kłopotów programiście. Zwłaszcza jeśli delikwent będzie miał złe zamiary i będzie chciał wykorzystać braki w naszych zabezpieczeniach do niecnych celów. Może w grze w \"Za dużo za mało\" nie ma to znaczenia, ale gdybyśmy kiedyś programowali aplikacje dla banku, to możemy sobie wyobrazić jakie mogłyby być konsekwencje naszego błędu."))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_welcome), _translate("Form", "Użytkownik naszych aplikacji"))
        self.TextEditInput.setPlainText(_translate("Form", "Python posiada specjalną funkcję, która obsługuje kontant z użytkownikiem. Nazywa się \"input\". Jako parametr przyjmuje komunikat, który chcemy pokazać użytkownikowi. Przy wywoływaniu funkcji pamiętajmy o nawiasach!\n"
"\n"
"input(\"Podaj swój wiek: \")\n"
"\n"
"I w tym momencie program czeka, aż użytkownik wpisze swój wiek i naciśnie enter na klawiaturze. W kodzie podanym powyżej informacja podana przez użytkownika zostanie zapomniana. Aby program ją zapamiętał, powinniśmy przypisać ją do zmiennej:\n"
"\n"
"wiek = input(\"Podaj swój wiek: \")\n"
"\n"
"Nazwa zmiennej tutaj nie ma żadnego znaczenia. Warto jednak nazywać swoje zmienne w taki sposób, aby później było wiadomo co znajduje się w środku. W kolejnych linijkach można korzystać ze zmiennej \"wiek\" jak z każdej innej zmiennej."))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_input), _translate("Form", "input"))
        self.TextEditElse.setPlainText(_translate("Form", "Jak widzieliśmy w poprzedniej zakładce rezultat inputu mogliśmy zapisać w zmiennej. Ważne, aby wiedzieć jakiego typu są nasze zmienne. Skoro zapisaliśmy tam wiek, to pewnie będzie to liczba? No właśnie nie! Wszystko co utrzymujemy od użytkownika jest zmienną tekstową, gdyż użytkownik proszony o wiek mógł wpisać dowolny ciąg znaków i nacisnąć enter. Dopiero w naszych rękach jest sprawdzić, co wpisał i czy da się to zamienić na liczbę.\n"
"\n"
"Aby sprawdzić typ zmienej wykorzystujemy funkcji:\n"
"type(zmienna)\n"
"W wyniku możemy otrzymać: str(tekst) albo int (liczba całkowita), ale też wiele więcej.\n"
"\n"
"Żeby natomiast zmienić typ zmiennej używamy:\n"
"int(zmienna) - zmienia typ na liczbę\n"
"str(zmienna) - zmienia typ na tekst\n"
"\n"
"Dlaczego tak ważne jest dbanie o odpowiedni typ? Np. dodawanie różnie działa w zależności od typu zmiennych.\n"
"\n"
"2 + 2 = 4 (int)\n"
"\'2\' + \'2\' = \'22\' (str)"))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_type_of_input), _translate("Form", "Typ zmiennej"))
        self.pushButtonExercise1.setText(_translate("Form", "Sprawdź"))
        self.TextEditExercise1.setPlainText(_translate("Form", "Pierwsze zadanie!\n"
"Jak myślisz, jaki będzie rezultat poniższego kodu, jeśli założymy, że użytkownik poda następujące dane: 3 i 4.\n"
"\n"
"liczba1 = input(\'Podaj pierwszą liczbę: \')\n"
"liczba2 = input(\'Podaj drugą liczbę: \')\n"
"print(liczba1 + liczba2)\n"
""))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_exercise1), _translate("Form", "Zadanie 1"))
        self.TextEditConditions.setPlainText(_translate("Form", "Użytkownik poproszony o podanie swojego wieku może czasami się pomylić i zamiast liczby wpisać jakaś literkę. Nasz program bez żadnej osłony się w tym momencie przestanie odpowiadać i się wyłączy. Jako programiści nie powinniśmy dopuścić do takiej sytuacji. Powinniśmy raczej podać użytkownikowi informację, gdzie popełnił błąd.\n"
"Aby upewnić się, że użytkownik podał nam tylko liczby możemy wykorzystać funkcję isdigit(). \n"
"\n"
"Przykładowy sposób użycia:\n"
"\n"
"wiek = input(\'Podaj swój wiek: \')\n"
"if wiek.isdigit():\n"
"    print(\'Podany wiek jest liczbą\')\n"
"    wiek = int(wiek)\n"
"    print(\'Za dwa lata będziesz miał: \')\n"
"    print(wiek + 2)\n"
"else:\n"
"   print(\'Podany wiek nie jest liczbą\')"))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_conditions), _translate("Form", "isdigit"))
        self.TextEditExercise2.setPlainText(_translate("Form", "Drugie zadanie!\n"
"Spróbuj zepsuć program. Kod który ma się wykonać po naciśnięciu przycisku sprawdź:\n"
"\n"
"a = input()\n"
"print( int(a) + 10 )"))
        self.pushButtonExercise2.setText(_translate("Form", "Sprawdź"))
        self.tabWidgetUserInput.setTabText(self.tabWidgetUserInput.indexOf(self.tab_exercise2), _translate("Form", "Zadanie 2"))
import obrazki.obrazki_input
